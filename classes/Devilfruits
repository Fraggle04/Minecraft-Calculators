<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Class Damage Calculator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
    }

    h1 {
      font-size: 28px;
      margin-bottom: 10px;
    }

    input[type="text"], input[type="number"] {
      padding: 5px;
      font-size: 16px;
      margin-bottom: 15px;
      width: 200px;
    }

    select {
      padding: 5px;
      font-size: 16px;
      margin-bottom: 15px;
      width: 210px;
    }

    ul {
      margin-top: 20px;
    }

    li {
      margin-bottom: 15px;
      font-size: 16px;
    }

    strong {
      font-size: 17px;
    }

    .value {
      color: #2a7ae2;
      font-weight: bold;
    }

    .multiplier {
      color: #888;
      font-size: 14px;
      margin-left: 5px;
    }
  </style>
</head>
<body>

  <h1>Class Damage Calculator</h1>

  <label for="classSearch">Search Class:</label><br>
  <input type="text" id="classSearch" placeholder="Type to filter classes..."><br>

  <label for="classSelect">Select Class:</label><br>
  <select id="classSelect"></select><br>

  <label for="strInput">Enter Strength Level (Str LVL):</label><br>
  <input type="number" id="strInput" value="1" min="0" step="0.1"><br>

  <div id="output">Loading...</div>

  <script>
    const DevilFruits = {

      // Devilfruits - Mythics
      "ðŸŸ£ Gravity Gravity Fruit": [
        { name: "Push", dmg: 25, stam: 1.3 },
        { name: "Obedience", dmg: 35, stam: 1.3 },
        { name: "Meteor", dmg: 30, stam: 1.3 },
        { name: "Meteor-Fury", dmg: 34, stam: 1.3 },
        { name: "Meteor Rain", dmg: 35, stam: 1.3 }
      ],
      "ðŸŸ£ Quake Quake Fruit": [
        { name: "Shock-Punch", dmg: 27, stam: 1.4 },
        { name: "Hypocentre-Sphere", dmg: 32, stam: 1.4 },
        { name: "Tremor Stomp", dmg: 32, stam: 1.4 },
        { name: "Island-Shaker", dmg: 32, stam: 1.4 },
        { name: "Tsunami (x2 hits)", dmg: 44, stam: 1.4 }
      ],

      // Devilfruits - Legendaries
      "ðŸŸ¡ Venom Venom Fruit": [
        { name: "Spitball", dmg: 10, stam: 1.7 },
        { name: "Fog", dmg: 18, stam: 1.2 },
        { name: "Hydra", dmg: 12.5, stam: 1.7 },
        { name: "Demon", dmg: 8, stam: 0 }
      ],
      "ðŸŸ¡ Dark Dark Fruit": [
        { name: "Black Hole", dmg: 18.5, stam: 1.8 },
        { name: "Liberation", dmg: 16, stam: 1.3 },
        { name: "Dark Matter", dmg: 20, stam: 1.3 },
        { name: "Dark Star", dmg: 14, stam: 1.3 }
      ],
      "ðŸŸ¡ Human-Human Fruit, Model: Buddha": [
        { name: "Transform", dmg: 0, stam: 0 },
        { name: "Palm strike", dmg: 18, stam: 0 },
        { name: "Zen charge", dmg: 30, stam: 0 },
        { name: "Impact wave", dmg: 8, stam: 0 }
      ],
      "ðŸŸ¡ Ope Ope Fruit": [
        { name: "Room", dmg: 0, stam: 1.2 },
        { name: "Gamma Knife", dmg: 14, stam: 1.3 },
        { name: "Shambles", dmg: 0, stam: 0.7 },
        { name: "Takt", dmg: 20, stam: 1.8 } 
      ],

      // Devilfruits - Epics
      "ðŸŸ£ Venom Venom Fruit": [
        { name: "Spitball", dmg: 10, stam: 1.7 },
        { name: "Fog", dmg: 18, stam: 1.2 },
        { name: "Hydra", dmg: 12.5, stam: 1.7 },
        { name: "Demon", dmg: 8, stam: 0 }
      ],
      "ðŸŸ£ Dark Dark Fruit": [
        { name: "Black Hole", dmg: 18.5, stam: 1.8 },
        { name: "Liberation", dmg: 16, stam: 1.3 },
        { name: "Dark Matter", dmg: 20, stam: 1.3 },
        { name: "Dark Star", dmg: 14, stam: 1.3 }
      ],
      "ðŸŸ£ Human-Human Fruit, Model: Buddha": [
        { name: "Transform", dmg: 0, stam: 0 },
        { name: "Palm strike", dmg: 18, stam: 0 },
        { name: "Zen charge", dmg: 30, stam: 0 },
        { name: "Impact wave", dmg: 8, stam: 0 }
      ],
      "ðŸŸ£ Ope Ope Fruit": [
        { name: "Room", dmg: 0, stam: 1.2 },
        { name: "Gamma Knife", dmg: 14, stam: 1.3 },
        { name: "Shambles", dmg: 0, stam: 0.7 },
        { name: "Takt", dmg: 20, stam: 1.8 } 
      ],
    };

    const classSelect = document.getElementById("classSelect");
    const classSearch = document.getElementById("classSearch");
    const strInput = document.getElementById("strInput");
    const outputDiv = document.getElementById("output");

    function populateClassDropdown(filter = "") {
      classSelect.innerHTML = "";
      for (const className in classes) {
        if (className.toLowerCase().includes(filter.toLowerCase())) {
          const option = document.createElement("option");
          option.value = className;
          option.textContent = className;
          classSelect.appendChild(option);
        }
      }
      update();
    }

    function calculateOutput(className, strLvl) {
      const abilities = classes[className];
      if (!abilities) return "<p>No abilities found for this class.</p>";

      let html = "<ul>";
      for (const ability of abilities) {
        const dmgTotal = (ability.dmg * strLvl).toFixed(2);
        const stamTotal = (ability.stam * strLvl).toFixed(2);

        html += `
          <li>
            <strong>${ability.name}</strong><br>
            â€¢ <span class="value">${dmgTotal} DMG</span>
            <span class="multiplier">(${ability.dmg} Ã— Str LVL)</span><br>
            â€¢ <span class="value">${stamTotal} stamina</span>
            <span class="multiplier">(${ability.stam} Ã— Str LVL)</span>
          </li>
        `;
      }
      html += "</ul>";
      return html;
    }

    function update() {
      const className = classSelect.value;
      const strLvl = parseFloat(strInput.value);
      if (!className || isNaN(strLvl) || strLvl < 0) {
        outputDiv.innerHTML = "<p>Please select a class and enter a valid Strength Level.</p>";
        return;
      }
      outputDiv.innerHTML = calculateOutput(className, strLvl);
    }

    classSearch.addEventListener("input", () => {
      populateClassDropdown(classSearch.value);
    });

    classSelect.addEventListener("change", update);
    strInput.addEventListener("input", update);

    populateClassDropdown(); // Initial load
  </script>

</body>
</html>
